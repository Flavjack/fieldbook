{
    "collab_server" : "",
    "contents" : "# fieldbook -----------------------------------------------------------------\n\nlibrary(shiny)\nlibrary(shinydashboard)\nlibrary(sapiens)\nlibrary(agricolae)\nlibrary(dplyr)\nlibrary(tibble)\nlibrary(DT)\nlibrary(ggplot2)\n\n\n\nshinyServer(function(input, output) {\n\n\n# import data -----------------------------------------------------------\n\ndata_fb <-  eventReactive(input$reload, {\n\n\n  validate(\n\n    need( input$fbdt, message = \"Insert a Google spreadsheet URL or xlsx file\" )\n\n    )\n\n\n  if ( !is.null(input$impdata) ) {\n\n    xls <- input$impdata\n\n    file.rename(xls$datapath, paste(xls$datapath, \".xlsx\", sep = \"\"))\n\n    sapiens::getData(dir = paste(xls$datapath, \".xlsx\", sep = \"\"), sheet = input$sheetdt)\n\n\n  } else {\n\n    url <- input$fbdt\n\n    sapiens::getData(dir = url, sheet = input$sheetdt)\n\n  }\n\n\n\n    }, ignoreNULL = FALSE)\n\n\n\noutput$fbook <- renderUI({\n\n  gss <- tags$iframe(src = input$fbdt,\n    style=\"height:450px; width:100%; scrolling=no\")\n\n  print(gss)\n\n})\n\n\n# Filter ------------------------------------------------------------------\n\noutput$filter_01 <- renderUI({\n\n  file <- data_fb()\n  fbn <- names(file)\n\n  selectInput(\n    inputId = \"filter_nm01\",\n    label = \"Factor\",\n    choices = c(\"choose\" = \"\", fbn)\n  )\n\n})\n\noutput$filter_fact01 <- renderUI({\n\n  validate(\n\n    need( input$filter_nm01, \"Select your levels\")\n\n  )\n\n  file <- data_fb()\n  fl <- file[, input$filter_nm01]\n\n  selectInput(\n    inputId = \"filter_ft01\",\n    label = \"Levels\",\n    choices = c(\"choose\" = \"\", fl),\n    multiple = TRUE\n  )\n\n})\n\noutput$filter_02 <- renderUI({\n\n  file <- data_fb()\n  fbn <- names(file)\n\n  selectInput(\n    inputId = \"filter_nm02\",\n    label = \"Factor\",\n    choices = c(\"choose\" = \"\", fbn)\n  )\n\n})\n\noutput$filter_fact02 <- renderUI({\n\n  validate(\n\n    need( input$filter_nm02, \"Select your levels\")\n\n  )\n\n  file <- data_fb()\n  fl <- file[, input$filter_nm02]\n\n  selectInput(\n    inputId = \"filter_ft02\",\n    label = \"Levels\",\n    choices = c(\"choose\" = \"\", fl),\n    multiple = TRUE\n  )\n\n})\n\n\n# Data analisys -----------------------------------------------------------\n\n\nfb <- reactive({\n\n\n  file <- data_fb()\n\n  fc1 <- input$filter_nm01\n  lv1 <- input$filter_ft01\n\n  fc2 <- input$filter_nm02\n  lv2 <- input$filter_ft02\n\n\n  if( fc1 == \"\" && fc2 == \"\" ){\n\n\n  dt <- file\n\n\n  } else if (fc1 != \"\" && fc2 != \"\"){\n\n    dt <- file %>%\n      subset( eval(parse(text = fc1)) %in% lv1 & eval(parse(text = fc2)) %in% lv2 )\n\n\n        if ( length(lv1) == 1){\n\n          dt[, fc1] <- NULL\n        }\n\n        if ( length(lv2) == 1){\n\n          dt[, fc2] <- NULL\n        }\n\n  } else if (fc1 != \"\" && fc2 == \"\" ){\n\n\n    dt <- file %>%\n      subset( eval(parse(text = fc1)) %in% lv1 )\n\n\n          if ( length(lv1) == 1){\n\n            dt[, fc1] <- NULL\n          }\n\n  } else if (fc1 == \"\" && fc2 != \"\" ){\n\n    dt <- file %>%\n      subset( eval(parse(text = fc2)) %in% lv2 )\n\n\n          if ( length(lv2) == 1){\n\n            dt[, fc2] <- NULL\n          }\n\n  }\n\n\n  dt\n\n\n})\n\n\n# boxplot -----------------------------------------------------------------\n\noutput$bpx <- renderUI({\n\n\n  file <- fb()\n  fbn <- names(file)\n\n  selectInput(\n    inputId = \"xbp\",\n    label = \"Axis X\",\n    choices = c(\"choose\" = \"\", fbn)\n  )\n\n})\n\noutput$bpy <- renderUI({\n\n  file <- fb()\n  fbn <- names(file)\n\n  selectInput(\n    inputId = \"ybp\",\n    label = \"Response\",\n    choices = c(\"choose\" = \"\", fbn)\n  )\n\n})\n\n\noutput$bpz <- renderUI({\n\n  file <- fb()\n  fbn <- names(file)\n\n  selectInput(\n    inputId = \"zbp\",\n    label = \"Grouped\",\n    choices = c(\"choose\" = \"\", fbn)\n  )\n\n})\n\n\noutput$boxplot <- renderPlot({\n\n  validate(\n\n    need( input$ybp, \"Select your response variable\"),\n    need( input$xbp, \"Select your X axis variable\" ),\n    need( input$zbp, \"Select your grouped variable\")\n\n  )\n\n\n\n  file <- fb()\n\n\n  variable <- input$ybp\n  fx <-  input$xbp\n  fz <-  input$zbp\n  gply <- input$bply\n  gplx <- input$bplx\n  gplz <- input$bplz\n  brk <- input$bpbrk\n\n  # Title axis --------------------------------------------------------------\n\n  if ( gply == \"\"){\n\n    gply <- NULL\n\n  }\n\n  if ( gplx == \"\"){\n\n    gplx <- NULL\n\n  }\n\n\n  if ( gplz == \"\"){\n\n    gplz <- NULL\n\n  }\n\n\n  if(is.na(brk)){\n\n    brks <- NULL\n\n  } else { brks <- brk}\n\n\n  boxp <- sapiens::plot_box(\n\n    data = file,\n    y = variable,\n    x = fx,\n    z = fz,\n    xlab = gplx,\n    ylab = gply,\n    lgl =  gplz,\n    lgd = \"top\",\n    font = input$bpsize,\n    brk = brks\n\n  )\n\n  boxp\n\n\n})\n\n\n# multivariate ------------------------------------------------------------\n\noutput$crpt <- renderPlot({\n\n  file <- fb()\n\n  sapiens::plot_correlation(\n    data = file,\n    sig = input$corsig,\n    color = input$corcol,\n    font = input$cor_font)\n\n})\n\n\noutput$pca <- renderPlot({\n\n  file <- fb()\n\n\n  if( is.na(input$pcaqs) ){\n\n    qs <- NULL\n\n  } else {\n\n    qs <- input$pcaqs\n\n  }\n\n\n  if( input$pcalbl == \"\" ){\n\n    lbl <- NULL\n\n  } else {\n\n    lbl <- input$pcalbl\n\n  }\n\n\n\n\n  sapiens::plot_PCA(\n    data = file,\n    type = input$pcatype,\n    quali.sup = qs,\n    lgl = lbl\n    )\n\n\n})\n\n\n# statistics --------------------------------------------------------------\n\n# Select factors\n\n\noutput$stat_response <- renderUI({\n\n  file <- fb()\n  fbn <- names(file)\n\n  selectInput(\n    inputId = \"stat_rsp\",\n    label = \"Response\",\n    choices = c(\"choose\" = \"\", fbn)\n  )\n\n})\n\n\noutput$stat_factor <- renderUI({\n\n  file <- fb()\n  fbn <- names(file)\n\n  selectInput(\n    inputId = \"stat_fact\",\n    label = \"Factors\",\n    choices = c(\"choose\" = \"\", fbn),\n    multiple = TRUE\n  )\n\n})\n\n\n\noutput$stat_block <- renderUI({\n\n  file <- fb()\n  fbn <- names(file)\n\n  selectInput(\n    inputId = \"stat_blk\",\n    label = \"Block\",\n    choices = c(\"choose\" = \"\", fbn),\n    multiple = TRUE\n  )\n\n})\n\n# ANOVA\n\n\nav <- reactive({\n\n  validate(\n\n    need( input$stat_rsp, \"Select your response variable\" ),\n    need( input$stat_fact, \"Select your factors\")\n\n  )\n\n    file <- fb()\n\n    variable <- input$stat_rsp\n\n    factor <- input$stat_fact %>% paste0() %>%  paste(collapse= \" * \")\n\n    block <- input$stat_blk %>% paste0() %>% paste(collapse= \" + \")\n\n    file <- file %>% dplyr::mutate_each_(funs(factor(.)), input$stat_fact)\n\n\n    if ( block == \"\" ){\n\n      formula <- as.formula(paste( variable , factor, sep = \" ~ \"))\n\n\n    } else {\n\n      formula <- as.formula(paste( variable , paste(block, factor, sep = \" + \"), sep = \" ~ \"))\n\n    }\n\n\n    av <- aov(formula, data = file)\n    av\n\n\n\n})\n\n\n# ANOVA table\n\noutput$tbav = renderPrint({\n\n  file <- av()\n\n  summary(file)\n\n\n})\n\n\n# comparison test\n\n\ncomp <- reactive({\n\n\n  file <- av()\n  test <- input$stmc\n  sig <- input$stsig\n  factor <- input$stat_fact\n  variable <- input$stat_rsp\n\n\n  if( length(factor) == 1 && !(variable == '') )\n\n  {\n\n    rs <- sapiens::test_comparison(\n      aov = file,\n      comp = factor[1],\n      type = test,\n      sig = sig)\n\n\n  }\n\n\n  else if( length(factor) >= 2 && !(variable == '') )\n\n  {\n\n    rs <- sapiens::test_comparison(\n      aov = file,\n      comp = c( factor[1], factor[2] ),\n      type = test,\n      sig = sig)\n\n\n  }\n\n\n  rs\n\n\n})\n\n\n\n# Mean comparison table\n\noutput$mnc = DT::renderDataTable({\n\n  file <- comp()\n\n  file <- file %>% format(digits = 3, nsmall = 3)\n\n\n  DT::datatable(file,\n\n    filter = 'top',\n    extensions = c('Buttons', 'Scroller'),\n    rownames = FALSE,\n\n    options = list(\n\n      searchHighlight = TRUE,\n      searching = TRUE,\n\n      dom = 'Bfrtip',\n      buttons = list(\n        'copy',\n        list(extend = 'csv', filename = input$stat_rsp),\n        list(extend = 'excel', filename = input$stat_rsp)\n        ),\n\n      autoWidth = TRUE,\n      columnDefs = list(list(className = 'dt-center', targets =\"_all\")),\n      deferRender=TRUE,\n      scrollY = 400,\n      scrollX = TRUE,\n      scroller = TRUE,\n\n      initComplete = DT::JS(\n        \"function(settings, json) {\",\n        \"$(this.api().table().header()).css({'background-color': '#000', 'color': '#fff'});\",\n        \"}\")\n    ))\n\n})\n\n\n# graphics ----------------------------------------------------------------\n\nstat_plot <- reactive({\n\ndf <- comp()\n\nfactor <- input$stat_fact\nvariable <- input$stat_rsp\n\ngtype <- input$gtype\ngcolor <- input$gcolor\n\ngply <- input$gply\ngplx <- input$gplx\ngplz <- input$gplz\n\ngerbr <- input$gerbr\ngsig <- input$gsig\ngfont <- input$gfont\nglabel <- input$glabel\n\nlimits <- input$glmti * input$glmtf\nbrakes <- input$gbrakes\n\nxbl <- input$gp_xbk\nzbl <- input$gp_zbk\n\n\n# Title axis --------------------------------------------------------------\n\nif ( gply == \"\"){\n\n  gply <- variable\n\n} else {\n\n  gply <- input$gply\n\n}\n\nif ( gplx == \"\"){\n\n  gplx <- NULL\n\n}\n\nif ( gplz == \"\"){\n\n  gplz <- NULL\n\n}\n\n\n# Color -------------------------------------------------------------------\n\nif ( gcolor == \"yes\" ){\n\n  gcolor <- TRUE\n\n} else {\n\n  gcolor <- FALSE\n\n}\n\n\n\n# Label brake axis --------------------------------------------------------\n\n\nif ( xbl == \"\"){\n\n  xbl <- NULL\n\n} else {\n\n  xbl <- input$gp_xbk\n\n}\n\nif ( zbl == \"\"){\n\n  zbl <- NULL\n\n} else {\n\n  zbl <- input$gp_zbk\n\n}\n\n# limits & brake ----------------------------------------------------------\n\nif(is.na(limits)) {\n\n  glimits <- NULL\n\n} else {\n\n  glimits <- c(input$glmti, input$glmtf)\n\n}\n\n\nif(is.na(brakes)) {\n\n  gbrakes <- NULL\n\n} else {\n\n  gbrakes <- brakes\n\n  }\n\n\n# Error & significance ----------------------------------------------------\n\nif(gerbr == \"yes\"){\n\n  gerbr <- TRUE\n\n}\n\nif (gerbr == \"no\"){\n\n  gerbr <-  FALSE\n\n  }\n\n\nif(gsig == \"yes\"){\n\n  gsig <- \"sg\"\n\n}\n\nif (gsig == \"no\"){\n\n  gsig <-  NULL\n\n  }\n\n\n\n# body graph --------------------------------------------------------------\n\n\nif( length(factor) == 1 && !(variable == '') ){\n\n         pt <- sapiens::plot_brln(data = df, type = gtype,\n                             x = factor[1],\n                             y = \"mean\",\n                             z = factor[1],\n                             ylab = gply,\n                             xlab = gplx,\n                             lgl = gplz,\n                             lgd = glabel,\n                             erb = gerbr,\n                             sig = gsig,\n                             font = gfont,\n                             lmt = glimits,\n                             brk = gbrakes,\n                             xbl = xbl,\n                             zbl = zbl,\n                             color = gcolor)\n\n\n}\n\n\nelse if( length(factor) >= 2  && !(variable == ''))\n\n{\n\n\n  pt <- sapiens::plot_brln(data = df, type = gtype,\n    x = factor[1],\n    y = \"mean\",\n    z = factor[2],\n    ylab = gply,\n    xlab = gplx,\n    lgl = gplz,\n    lgd = glabel,\n    erb = gerbr,\n    sig = gsig,\n    font = gfont,\n    lmt = glimits,\n    brk = gbrakes,\n    xbl = xbl,\n    zbl = zbl,\n    color = gcolor\n  )\n\n\n}\n\n\npt\n\n\n})\n\n\n\n# plot output -------------------------------------------------------------\n\noutput$stplot <- renderPlot({\n\n  plot <-  stat_plot()\n  plot\n\n})\n\n# download plot -----------------------------------------------------------\n\noutput$download_plot <- downloadHandler(\n  file = function(){ paste( \"plot_\", input$stat_rsp, '.tiff', sep = '')},\n  content = function(file){\n    ggplot2::ggsave(file, plot = stat_plot(), device = \"tiff\", dpi = 300, width = input$plot_W, height = input$plot_H, units = \"mm\" )\n\n  }\n)\n\n\n# fieldbook design --------------------------------------------------------\n\n\n\nfdbk <- reactive({\n\n  validate(\n    need( input$tool_f1, \"Insert levels for your experiment\")\n  )\n\n  trt1 <- input$tool_f1\n  trt2 <- input$tool_f2\n  dsg <-  input$tool_dsg\n  lbl1 <- input$tool_lb1\n  lbl2 <- input$tool_lb2\n  r <- input$tool_rep\n  int <- input$tool_eva\n\n\n  if( trt2 == \"\" ){\n\n    trt2 <- NULL\n\n  } else {\n\n    trt2 <- input$tool_f2\n\n  }\n\n  if( trt1 == \"\" ){\n\n    trt1 <- NULL\n\n  } else {\n\n    trt1 <- input$tool_f1\n\n  }\n\n\n  if( input$tool_rep == \"\" ){\n\n    r <- NULL\n\n  } else {\n\n    r <- input$tool_rep\n\n  }\n\n\n  if( input$tool_var == \"\" ){\n\n    vars <- NULL\n\n  } else {\n\n    vars <- input$tool_var\n\n  }\n\n\n  sapiens::design_fieldbook(\n    treat1 = trt1,\n    treat2 = trt2,\n    rep = r,\n    design = dsg,\n    lbl_treat1 = lbl1,\n    lbl_treat2 = lbl2,\n    variables = vars,\n    intime = int\n    )\n\n\n})\n\n\n\n# Fieldbook table ---------------------------------------------------------\n\noutput$fbdsg = DT::renderDataTable({\n\n\nfile <- fdbk()\n\nDT::datatable(file,\n\n  filter = 'top',\n  extensions = c('Buttons', 'Scroller'),\n  rownames = FALSE,\n\n  options = list(\n\n    searchHighlight = TRUE,\n    searching = TRUE,\n\n    dom = 'Bfrtip',\n    buttons = list(\n      'copy',\n      list(extend = 'csv', filename = \"FieldBook\"),\n      list(extend = 'excel', filename = \"FieldBook\")\n      ),\n\n    autoWidth = TRUE,\n    columnDefs = list(list(className = 'dt-center', targets =\"_all\")),\n    deferRender=TRUE,\n    scrollY = 400,\n    scrollX = TRUE,\n    scroller = TRUE,\n\n    initComplete = DT::JS(\n      \"function(settings, json) {\",\n      \"$(this.api().table().header()).css({'background-color': '#000', 'color': '#fff'});\",\n      \"}\")\n  ))\n\n\n})\n\n\n\n# Lineal regression -------------------------------------------------------\n\noutput$lrg_variable1 <- renderUI({\n\n  file <- fb()\n  fbn <- names(file)\n\n  selectInput(\n    inputId = \"lrg_var1\",\n    label = \"Variable\",\n    choices = c(\"choose\" = \"\", fbn)\n  )\n\n})\n\n\noutput$lrg_variable2 <- renderUI({\n\n  file <- fb()\n  fbn <- names(file)\n\n  selectInput(\n    inputId = \"lrg_var2\",\n    label = \"Variable\",\n    choices = c(\"choose\" = \"\", fbn)\n  )\n\n})\n\n\n\noutput$lrg_grouped <- renderUI({\n\n  file <- fb()\n  fbn <- names(file)\n\n  selectInput(\n    inputId = \"lrg_group\",\n    label = \"Grouped\",\n    choices = c(\"choose\" = \"\", fbn)\n  )\n\n})\n\n\nplot_lr <- reactive({\n\n  validate(\n\n    need( input$lrg_var1, \"Select your numeric variable\"),\n    need( input$lrg_var2, \"Select your numeric variable\" )\n\n  )\n\n\n  file <- fb()\n  xvr <- input$lrg_var1\n  yvr <- input$lrg_var2\n  zvr <- input$lrg_group\n  sfn <- input$lr_font\n  col <- input$lr_color\n  lgp <- input$lr_label\n  xlab <- input$lr_lbv1\n  ylab <- input$lr_lbv2\n  lgl <- input$lr_lbgp\n  xbk  <- input$lr_brk1\n  ybk <- input$lr_brk2\n  lvl <- input$lr_lglv\n  rlx <- input$lr_eq_x\n  rly <- input$lr_eq_y\n\n\n  if ( col == \"yes\" ){\n\n    col <- TRUE\n\n  } else {\n\n    col <- FALSE\n\n  }\n\n  if ( zvr == \"\" ){\n\n    zvr <- NULL\n\n  }\n\n  if ( ylab == \"\" ){\n\n    ylab <- NULL\n\n  }\n\n  if ( xlab == \"\" ){\n\n    xlab <- NULL\n\n  }\n\n\n  if ( lgl == \"\" ){\n\n    lgl <- NULL\n\n  }\n\n  if ( lvl == \"\" ){\n\n    lvl <- NULL\n\n  }\n\n  if ( is.na(ybk) ){\n\n    ybk <- NULL\n\n  }\n\n  if ( is.na(xbk) ){\n\n    xbk <- NULL\n\n  }\n\n  if ( is.na(rlx) ){\n\n    rlx <- NULL\n\n  }\n\n  if ( is.na(rly) ){\n\n    rly <- NULL\n\n  }\n\n  fieldbook::plot_linereg(\n    data = file,\n    y = yvr,\n    x = xvr,\n    z = zvr,\n    lgd = lgp,\n    color = col,\n    ylab = ylab,\n    xlab =  xlab,\n    lgl = lgl,\n    xbrk = xbk,\n    ybrk = ybk,\n    zbl = lvl,\n    font = sfn,\n    rlx = rlx,\n    rly = rly\n  )\n\n\n})\n\n\n\noutput$plot_regression <- renderPlot({\n\n  plot <-  plot_lr()\n  plot\n\n})\n\n\n# download reg plot -----------------------------------------------------------\n\noutput$download_plot_lr <- downloadHandler(\n  file = function(){ paste( \"plot_\", input$lrg_var2, \"_\" ,  input$lrg_var1, '.tiff', sep = '')},\n  content = function(file){\n    ggplot2::ggsave(file, plot = plot_lr(), device = \"tiff\", dpi = 300, width = input$lr_plot_W, height = input$lr_plot_H, units = \"mm\" )\n\n  }\n)\n\n})\n",
    "created" : 1487442261814.000,
    "dirty" : false,
    "encoding" : "UTF-8",
    "folds" : "",
    "hash" : "87939903",
    "id" : "9E615984",
    "lastKnownWriteTime" : 1487476804,
    "last_content_update" : 1487476804209,
    "path" : "~/GitHub/fieldbook/inst/fieldbook/server.R",
    "project_path" : "inst/fieldbook/server.R",
    "properties" : {
    },
    "relative_order" : 3,
    "source_on_save" : false,
    "source_window" : "",
    "type" : "r_source"
}