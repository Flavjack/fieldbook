{
    "collab_server" : "",
    "contents" : "globalVariables(\".\")\n\n#' Plot line or bar graphic\n#'\n#' @description Function use the dtsm funtion for plot the results\n#' @param data Output dtsm fuction\n#' @param type Type of graphic. \"bar\" or \"line\"\n#' @param x Axis x variable\n#' @param y Axis y variable\n#' @param z Group variable\n#' @param ylab Title for the axis y\n#' @param xlab Title for the axis x\n#' @param lgl Title for the legend\n#' @param lgd the position of legends (\"none\", \"left\", \"right\", \"bottom\", \"top\", or two-element numeric vector)\n#' @param sig Significance of the result (letters)\n#' @param erb Show the error bar.\n#' @param lmt limits of the y axis\n#' @param brk break of the y axis\n#' @param xbl axis brakes labels in strign with doble space\n#' @param zbl legend label in strign with doble space\n#' @param color colored figure (TRUE), otherwise black & white (FALSE)\n#' @param font letter size in plot\n#' @return Line o bar plot\n#' @importFrom dplyr mutate\n#' @importFrom ggplot2 aes aes_string element_blank element_rect element_text geom_bar geom_errorbar geom_line geom_point geom_text ggplot position_dodge scale_color_discrete scale_fill_hue scale_shape_discrete scale_x_discrete scale_y_continuous theme theme_bw unit scale_fill_discrete\n#' @importFrom gtools mixedsort\n#' @export\n\nplot_brln <- function(data, type= \"bar\", x, y, z, ylab = NULL, xlab = NULL, lgl = NULL,lgd = \"top\", sig = NULL, erb = FALSE, lmt = NULL, brk = NULL, xbl = NULL, zbl = NULL, color = TRUE, font = 1){\n\n  ste <- NULL #To avoid this NOTE: fplot: no visible binding for global variable 'ste'\n\n  if(is.null(brk)){\n\n    brks <- ggplot2::waiver() } else {\n\n    brks <- (((round(min(data[,y]), 0))*(-20)):((round(min(data[,y]), 0))*(+20))) * brk\n\n\n    }\n\n  data[,x] <- factor(data[,x], levels = gtools::mixedsort(data[,x]))\n  data[,z] <- factor(data[,z], levels = gtools::mixedsort(data[,z]))\n\n\n  if ( is.null(ylab)){\n\n    ylab <- y\n\n  } else {\n\n    yl <- gsub(pattern = \" \",replacement = \"~\", ylab)\n    ylab <- eval(expression(parse(text = yl)))\n\n  }\n\n\n  if ( is.null(xlab)){\n\n    xlab <- x\n\n  } else {\n\n\n  xl <- gsub(pattern = \" \",replacement = \"~\", xlab)\n  xlab <- eval(expression(parse(text = xl)))\n\n\n  }\n\n\n  if ( is.null(lgl)){\n\n    lgl <- z\n\n  } else {\n\n\n    ll <- gsub(pattern = \" \",replacement = \"~\", lgl)\n    lgl  <- eval(expression(parse(text = ll)))\n\n\n  }\n\n\n\n\n  data <- data %>% mutate(ymax = mean+ste)\n\n\n  if( !is.null(xbl) ){\n\n    xbl <- unlist(strsplit(xbl, split = \"  \"))\n    xbl <- factor(unique( xbl[ xbl != \"  \"]))\n    xbl <- as.character(xbl)\n\n  } else {\n\n    xbl <- ggplot2::waiver()\n\n  }\n\n  if( !is.null(zbl) ){\n\n    zbl <- unlist(strsplit(zbl, split = \"  \"))\n    zbl <- factor(unique( zbl[ zbl != \"  \"]))\n    zbl <- as.character(zbl)\n\n  } else {\n\n    zbl <- ggplot2::waiver()\n\n  }\n\n\n\n  if (type == \"bar\"){\n\n    bsp <- ggplot(data, aes_string(x , y, fill= z))+\n      geom_bar(position=position_dodge(),colour=\"black\",stat=\"identity\", size=.4)+\n      scale_x_discrete(xlab, labels = xbl)+\n\n\n      if ( color == TRUE ){\n\n      scale_fill_discrete(lgl, labels = zbl)\n\n\n      } else if ( color == FALSE ) {\n\n      scale_fill_grey(lgl, labels = zbl, start = 1, end = 0.1)\n\n\n      }\n\n\n      if (is.null(lmt)){\n\n       gr <- bsp + scale_y_continuous(ylab, breaks = brks)\n\n      }\n\n      if ( !is.null(lmt)){\n\n      gr <- bsp + scale_y_continuous(ylab, expand = c(0,0), limits = lmt, breaks = brks)\n\n      }\n\n\n\n      if( erb == TRUE && !(is.null(sig)) ){\n\n      p <-   gr +\n        geom_errorbar(aes(ymin= mean - ste , ymax= mean + ste), size=.2, width=.2, position=position_dodge(.9)) +\n        geom_text(aes_string(label= sig, y = \"ymax\"), colour=\"black\", size= 2*font, vjust=-.5, angle = 0, position=position_dodge(.9))\n\n\n      }\n\n      if ( erb == TRUE && is.null(sig) ){\n\n        p <- gr +\n          geom_errorbar(aes(ymin= mean - ste , ymax= mean + ste), size=.2, width=.2, position=position_dodge(.9))\n\n\n      }\n\n      if ( erb == FALSE && !(is.null(sig)) ){\n\n        p <- gr +\n          geom_text(aes_string(label= sig, y = \"mean\"), colour=\"black\", size= 2*font, vjust=-.5, angle = 0, position=position_dodge(.9))\n\n      }\n\n      if ( erb == FALSE && is.null(sig) ) {\n\n        p <- gr\n\n      }\n\n\n  } else if(type == \"line\"){\n\n\n\n\n      if ( color == TRUE ){\n\n    bsp <- ggplot(data, aes_string(x, y, group = z, shape= z, color= z))+\n      geom_line(size = 0.3)+\n      geom_point(size = 1.2*font)+\n      scale_x_discrete(xlab, labels = xbl)+\n      scale_color_discrete(lgl, labels = zbl)+\n      scale_shape_discrete(lgl, labels = zbl)\n\n\n      } else if (color == FALSE ){\n\n        bsp <- ggplot(data, aes_string(x, y, group = z, shape= z, color= z))+\n          geom_line(size = 0.3)+\n          geom_point(size = 1.2*font)+\n          scale_x_discrete(xlab, labels = xbl)+\n          scale_color_grey(lgl, labels = zbl, start = 0, end = 0) +\n          scale_shape_discrete(lgl, labels = zbl)\n\n      }\n\n\n    if (is.null(lmt)){\n\n      gr <- bsp + scale_y_continuous(ylab, breaks = brks)\n\n    }\n\n    if ( !is.null(lmt)){\n\n      gr <- bsp + scale_y_continuous(ylab, expand = c(0,0), limits = lmt, breaks = brks)\n\n    }\n\n\n    if( erb == TRUE && !(is.null(sig)) ){\n\n      p <-   gr +\n        geom_errorbar(aes(ymin= mean - ste , ymax= mean + ste), size=.2, width=.2)+\n        geom_text(aes_string(label= sig, y = \"mean\"), colour=\"black\", size= 2*font, vjust=-.5, hjust = -.5,angle = 0)\n\n    }\n\n    if ( erb == TRUE && is.null(sig) ){\n\n      p <- gr +\n        geom_errorbar(aes(ymin= mean - ste , ymax= mean + ste), size=.2, width=.2)\n\n\n    }\n\n    if ( erb == FALSE && !(is.null(sig)) ){\n\n      p <- gr +\n        geom_text(aes_string(label= sig, y = \"mean\"), colour=\"black\", size= 2*font, vjust=-.5, hjust = -.5,angle = 0)\n\n    }\n\n    if ( erb == FALSE && is.null(sig) ) {\n\n      p <- gr\n\n    }\n\n\n\n  }\n\n\n\n  p + theme_bw()+\n    theme(\n      axis.title.x = element_text(size= 8*font),\n      axis.title.y = element_text(size= 8*font, angle=90),\n      panel.grid.major = element_blank(),\n      panel.grid.minor = element_blank(),\n      legend.position = lgd,\n      legend.title = element_text(size= 8*font),\n      legend.text = element_text(size= 8*font),\n      legend.key.size = unit(0.8*font, \"lines\"),\n      legend.key = element_blank(),\n      legend.background = element_rect(fill= \"transparent\"),\n      text = element_text(size = 8*font)\n    )\n\n\n\n}\n\n\n\n#' Boxplot graphic\n#'\n#' @description Function use the raw data for made a boxplot graphic\n#' @param data raw data\n#' @param x Axis x variable\n#' @param y Axis y variable\n#' @param z Group variable\n#' @param ylab Title for the axis y\n#' @param xlab Title for the axis x\n#' @param lgl Title for the legend\n#' @param lgd the position of legends (\"none\", \"left\", \"right\", \"bottom\", \"top\", or two-element numeric vector)\n#' @param brk break of the y axis\n#' @param font letter size in plot\n#' @return boxplot\n#' @importFrom dplyr mutate\n#' @importFrom ggplot2 aes aes_string element_blank element_rect element_text geom_bar geom_boxplot geom_errorbar geom_line geom_point geom_text ggplot position_dodge position_jitterdodge scale_color_discrete scale_fill_hue scale_shape_discrete scale_x_discrete scale_y_continuous theme theme_bw unit scale_fill_discrete\n#' @importFrom gtools mixedsort\n#' @export\n\n\nplot_box <- function(data, x, y, z, ylab = NULL, xlab = NULL, lgl = NULL, lgd = \"top\", brk = NULL, font = 1){\n\n\n  data[,x] <- factor(data[,x], levels = gtools::mixedsort(data[,x]))\n  data[,z] <- factor(data[,z], levels = gtools::mixedsort(data[,z]))\n\n\n  if( !is.null(xlab) ){\n\n    xl <- gsub(pattern = \" \",replacement = \"~\", xlab)\n    xlab <- eval(expression(parse(text = xl)))\n\n  } else {\n\n    xlab <- x\n\n  }\n\n  if( !is.null(ylab) ){\n\n    yl <- gsub(pattern = \" \",replacement = \"~\", ylab)\n    ylab <- eval(expression(parse(text = yl)))\n\n\n  } else {\n\n    ylab <- y\n\n  }\n\n\n  if( !is.null(lgl) ){\n\n    ll <- gsub(pattern = \" \",replacement = \"~\", lgl)\n    lgl  <- eval(expression(parse(text = ll)))\n\n  } else {\n\n    lgl <- z\n\n  }\n\n\n  if(is.null(brk)){\n\n    brks <- ggplot2::waiver() } else {\n\n      brks <- (((round(mean(data[,y]), 0))*(-20)):((round(mean(data[,y]), 0))*(+20))) * brk\n\n\n    }\n\n  ggplot(data, aes_string( x = x , y = y, fill = z))+\n    geom_boxplot(outlier.colour = \"red\", outlier.size = 2.5)+\n    geom_point(position = position_jitterdodge())+\n    scale_x_discrete( xlab )+\n    scale_y_continuous( ylab, breaks = brks)+\n    scale_fill_discrete( lgl )+\n    theme_bw()+\n    theme(\n      axis.title.x = element_text(size= 8*font),\n      axis.title.y = element_text(size= 8*font, angle=90),\n      panel.grid.major = element_blank(),\n      panel.grid.minor = element_blank(),\n      legend.position = lgd,\n      legend.title = element_text(size= 8*font),\n      legend.text = element_text(size= 8*font),\n      legend.key.size = unit(0.8*font, \"lines\"),\n      legend.key = element_blank(),\n      legend.background = element_rect(fill= \"transparent\"),\n      text = element_text(size = 8*font)\n    )\n}\n\n\n\n#' Correlation graphic\n#'\n#' @description Function use to plot correlation matrix\n#' @param data matrix with numeric data\n#' @param method method of the correlation analisis: c(\"pearson\", \"kendall\", \"spearman\", \"lin\")\n#' @param sig level of significance\n#' @param color colors in the correlation matrix\n#' @return correlation plot\n#' @importFrom agricolae correlation\n#' @importFrom corrplot corrplot\n#' @export\n\nplot_correlation <- function(data, method = \"pearson\", sig = 0.05, color = NULL, font = 1){\n\n  data <-  data %>% dplyr::select_if(is.numeric) %>% as.data.frame()\n  sig <- as.numeric(sig)\n\n  cor <- agricolae::correlation(x = data, method = \"pearson\")\n\n  #write.csv(cor$pvalue, \"pvalues.csv\")\n\n  if ( is.null(color)  ){\n\n    col <- colorRampPalette(c(\"#DD5143\", \"#F38A78\",\"#FEC9B8\", \"#FFFFFF\", \"#FFFFFF\",\"#CFEDFB\", \"#68C7EC\", \"#00A0DC\"))\n\n  } else {\n\n    palet <- unlist(strsplit(color, split = \" \"))\n    clr <-  palet[ palet != \"\"]\n\n    col <- colorRampPalette(clr)\n\n  }\n\n\n  crp <- corrplot::corrplot(\n\n    corr = cor$correlation,\n    method = \"color\",\n    type = \"upper\",\n    tl.col=\"black\",\n    insig = \"blank\",\n    tl.srt=30,\n    addCoef.col = \"black\",\n    addgrid.col = \"black\",\n    col=col(8),\n    p.mat = cor$pvalue,\n    sig.level = sig,\n    tl.cex = 1*font,\n    number.cex = 0.9*font\n    )\n\n\n\n}\n\n\n#' Principal component analisys graphic\n#'\n#' @description Function use to plot biplot principal component analisys\n#' @param data matrix with numeric data\n#' @param type type of plot PCA: c(\"ind\", \"var\", \"biplot\")\n#' @param quali.sup number of colum of qualitative variable\n#' @param lgl label legend\n#' @return PCA biplot graph\n#' @importFrom FactoMineR PCA\n#' @importFrom ggplot2 theme_minimal scale_shape scale_color_brewer\n#' @importFrom factoextra fviz_pca_biplot\n#' @importFrom grDevices colorRampPalette\n#' @export\n\nplot_PCA <- function(data, type = \"biplot\", quali.sup = NULL, lgl = NULL){\n\n\n  if( is.null(quali.sup)){\n\n    data  <- data %>%   dplyr::select_if(is.numeric)\n    hab <- \"none\"\n    qsp <- NULL\n\n  } else {\n\n    fn <- colnames(data[quali.sup])\n    data[ ,fn] <- as.factor(data[ ,fn])\n    tn <- data %>% dplyr::select_if(is.numeric) %>% colnames()\n    data <- data[c(fn,tn)]\n\n    hab <- 1\n    qsp <- 1\n\n    if( is.null(lgl) ){\n\n      lgl <- fn\n\n    } else {\n\n      lgl <- lgl\n\n    }\n\n  }\n\n\n  pca <- FactoMineR::PCA(\n    data,\n    quali.sup = qsp,\n    scale.unit = TRUE,\n    ncp = 5,\n    graph = FALSE\n    )\n\n  if(type == \"ind\"){\n\n  plot <- factoextra::fviz_pca_ind(\n    X = pca,\n    habillage = hab,\n    addEllipses =F,\n    ellipse.level = 0.68,\n    title = \"\") +\n    scale_color_brewer(palette=\"Dark2\") +\n    theme_minimal()+\n    scale_shape( lgl ) +\n    scale_color_discrete( lgl )\n\n  } else if (type == \"var\") {\n\n\n   plot <- factoextra::fviz_pca_var(\n     X = pca,\n     title = \"\") +\n      scale_color_brewer(palette=\"Dark2\") +\n      theme_minimal()\n\n  } else if (type == \"biplot\"){\n\n    plot <- factoextra::fviz_pca_biplot(\n      pca,\n      habillage = hab,\n      cex = 1,\n      autoLab = \"auto\",\n      col.var = \"black\",\n      addEllipses = FALSE,\n      title = \"\") +\n      scale_shape( lgl ) +\n      scale_color_discrete( lgl )\n\n\n\n  }\n\n\n\n  plot +\n    theme_bw() +\n    theme(\n      axis.title.x = element_text(size = 12),\n      axis.title.y = element_text(size = 12, angle = 90), panel.grid.major = element_blank(),\n      panel.grid.minor = element_blank(),\n      legend.title = element_text(size = 12), legend.text = element_text(size = 12),\n      legend.key.size = unit(2, \"lines\"), legend.key = element_blank(),\n      legend.background = element_rect(fill = \"transparent\"),\n      text = element_text(size = 12)\n    )\n\n\n\n  # summary(pca, nbelements = Inf, file=\"PCA.txt\")\n\n\n}\n\n\n\n#' Plot line regression\n#'\n#' @description Function plot linea regression\n#' @param data Output dtsm fuction\n#' @param x Axis x variable\n#' @param y Axis y variable\n#' @param z Group variable\n#' @param ylab Title for the axis y\n#' @param xlab Title for the axis x\n#' @param lgl Title for the legend\n#' @param lgd the position of legends (\"none\", \"left\", \"right\", \"bottom\", \"top\", or two-element numeric vector)\n#' @param lmt limits of the y axis\n#' @param brk break of the y axis\n#' @param xbl axis brakes labels in strign with doble space\n#' @param zbl legend label in strign with doble space\n#' @param color colored figure (TRUE), otherwise black & white (FALSE)\n#' @param font letter size in plot\n#' @param rlx regression line position in axis x.\n#' @param rly regression line position in axis y.\n#' @return Line regression plot\n#' @importFrom dplyr mutate\n#' @importFrom ggplot2 geom_smooth scale_x_continuous scale_color_grey aes aes_string element_blank element_rect element_text geom_bar geom_errorbar geom_line geom_point geom_text ggplot position_dodge scale_color_discrete scale_fill_hue scale_shape_discrete scale_x_discrete scale_y_continuous theme theme_bw unit scale_fill_discrete scale_fill_grey\n#' @importFrom gtools mixedsort\n#' @importFrom stats lm\n#' @export\n\n\nplot_linereg <- function(data, x, y, z, ylab = NULL, xlab = NULL, lgl = NULL,lgd = \"top\", xbrk = NULL, ybrk = NULL, zbl = NULL, color = TRUE, font = 1, rlx = NULL, rly = NULL){\n\n\n  if( !is.null(xlab) ){\n\n    xl <- gsub(pattern = \" \",replacement = \"~\", xlab)\n    xlab <- eval(expression(parse(text = xl)))\n\n  } else {\n\n    xlab <- x\n\n  }\n\n  if( !is.null(ylab) ){\n\n    yl <- gsub(pattern = \" \",replacement = \"~\", ylab)\n    ylab <- eval(expression(parse(text = yl)))\n\n\n  } else {\n\n    ylab <- y\n\n  }\n\n\n  if( !is.null(lgl) ){\n\n    ll <- gsub(pattern = \" \",replacement = \"~\", lgl)\n    lgl  <- eval(expression(parse(text = ll)))\n\n  } else {\n\n    lgl <- z\n\n  }\n\n\n  if( !is.null(zbl) ){\n\n    zbl <- unlist(strsplit(zbl, split = \"  \"))\n    zbl <- factor(unique( zbl[ zbl != \"  \"]))\n    zbl <- as.character(zbl)\n\n  } else {\n\n    zbl <- ggplot2::waiver()\n\n  }\n\n\n\n\n  if(is.null(xbrk)){\n\n    xbrks <- ggplot2::waiver() } else {\n\n      xbrks <- (((round(mean(data[,x]), 0))*(-20)):((round(mean(data[,x]), 0))*(+20))) * xbrk\n\n\n    }\n\n\n  if(is.null(ybrk)){\n\n    ybrks <- ggplot2::waiver() } else {\n\n      ybrks <- (((round(mean(data[,y]), 0))*(-20)):((round(mean(data[,y]), 0))*(+20))) * ybrk\n\n\n    }\n\n  rgl <- fieldbook::lm_eqn(x, y, data)\n\n  if ( is.null(rlx) ){ rlx = -Inf } else { rlx = rlx }\n  if ( is.null(rly) ){ rly = Inf } else { rly = rly }\n\n\n  p <- ggplot(data, aes_string(  x = x , y = y, group = z, shape= z, color= z))+\n    geom_smooth(method = lm, se = FALSE, fullrange = TRUE, size = 0.3)+\n    geom_point(size = 1.2*font)+\n    scale_x_continuous( xlab, expand = c(0,0), breaks = xbrks)+\n    scale_y_continuous( ylab, expand = c(0,0), breaks = ybrks )+\n    scale_shape_discrete(lgl, labels = zbl)+\n    annotate(\"text\", label = rgl, parse = T, x = rlx, y = rly, vjust = \"inward\", hjust = \"inward\", size= 2.5*font)\n\n\n  if ( color == TRUE ){\n\n    p <- p +\n      scale_color_discrete(lgl, labels = zbl)\n\n\n\n  } else if (color == FALSE ){\n\n    p <- p +\n      scale_color_grey(lgl, labels = zbl, start = 0, end = 0)\n\n\n  }\n\n    p + theme_bw()+\n    theme(\n      axis.title.x = element_text(size= 8*font),\n      axis.title.y = element_text(size= 8*font, angle=90),\n      panel.grid.major = element_blank(),\n      panel.grid.minor = element_blank(),\n      legend.position = lgd,\n      legend.title = element_text(size= 8*font),\n      legend.text = element_text(size= 8*font),\n      legend.key.size = unit(0.8*font, \"lines\"),\n      legend.key = element_blank(),\n      legend.background = element_rect(fill= \"transparent\"),\n      text = element_text(size = 8*font)\n    )\n}\n\n\n\n\n",
    "created" : 1487442733444.000,
    "dirty" : false,
    "encoding" : "UTF-8",
    "folds" : "",
    "hash" : "3801503473",
    "id" : "876155D3",
    "lastKnownWriteTime" : 1487476172,
    "last_content_update" : 1487476172176,
    "path" : "~/GitHub/fieldbook/R/plot.R",
    "project_path" : "R/plot.R",
    "properties" : {
    },
    "relative_order" : 2,
    "source_on_save" : false,
    "source_window" : "",
    "type" : "r_source"
}