{
    "collab_server" : "",
    "contents" : "#' @importFrom dplyr %>%\n#' @export\ndplyr::`%>%`\n\n\n\n\n\n#' Multiple comparison test\n#'\n#' @description Function analisis of variance for summary data.\n#' @param aov lm o aov result function.\n#' @param comp treatments will be compared.\n#' @param type method for made comparision analysis: c(\"snk\", \"tukey\", \"duncan\").\n#' @param sig significance level. Default 0.05\n#' @return Table with complete data for graphics\n#' @importFrom agricolae SNK.test HSD.test duncan.test\n#' @export\n\n\ntest_comparison <- function( aov, comp, type = \"snk\", sig = 0.05){\n\n  if( type == \"snk\"){\n\n    mc <- agricolae::SNK.test(y = aov, trt = comp, alpha = sig)\n\n  } else if (type == \"tukey\"){\n\n    mc <- agricolae::HSD.test(y = aov, trt = comp, alpha = sig)\n\n  } else if (type == \"duncan\"){\n\n    mc <- agricolae::duncan.test(y = aov, trt = comp, alpha = sig)\n\n  }\n\n  sapiens::data_summary(mc)\n\n}\n\n\n#' Field book design for data collection\n#'\n#' @description Function to construct your field book for your experiment\n#' @param treat1 strign with the name of the level factor with only space\n#' @param treat2 strign with the name of the level factor with only space\n#' @param rep number of repetition\n#' @param design experimental design c(\"rcbd\",\"crd\",\"lsd\")\n#' @param lbl_treat1 col label for treat 1\n#' @param lbl_treat2 col label for treat 2\n#' @param variables name of the variable evaluated in string with only space\n#' @return Table with the experimental design\n#' @importFrom agricolae design.ab\n#' @importFrom data.table setnames\n#' @export\n\n\ndesign_fieldbook <- function( treat1 = NULL, treat2 = NULL, rep = NULL, intime = 1, design = \"crd\", lbl_treat1 = NULL, lbl_treat2 = NULL, variables = NULL){\n\n\n  if( is.null(treat1) && is.null(treat2) && is.null(rep) ){\n\n    stop(\"You need to insert level for your treatments\")\n\n  }\n\n\n  tr1 <- treat1\n  tr2 <- treat2\n  dsg <- design\n\n  if( !is.null(tr1) ) {\n\n    tr1 <- treat1\n\n    if(is.null(lbl_treat1)){\n\n      lbt1 <- \"treat1\"\n\n    } else {\n\n      lbt1 <- gsub(\"\\\\s\", \"_\", lbl_treat1)\n\n    }\n\n  }\n\n  if(is.null(tr2)){\n\n    tr2 = as.character(\"1\")\n    lbt2 = \"treat2\"\n\n  } else if( !is.null(tr2) ) {\n\n      tr2 <- treat2\n\n      if(is.null(lbl_treat2)){\n\n        lbt2 <- \"treat2\"\n\n      } else {\n\n        lbt2 <- gsub(\"\\\\s\", \"_\", lbl_treat2)\n\n      }\n\n  }\n\n\n  if ( !is.null(variables) ){\n\n    varst <- unlist(strsplit(variables, split = \" \"))\n    varfb <- factor(unique( varst[ varst != \"\"]))\n    varfb <- as.character(varfb)\n\n  }\n\n\n\n  vc1 <- unlist(strsplit(tr1, split = \" \"))\n  vc2 <- unlist(strsplit(tr2, split = \" \"))\n\n  trt1 <- factor(unique( vc1[ vc1 != \"\"]))\n  trt2 <- factor(unique( vc2[ vc2 != \"\"]))\n\n  lt1 <- length(trt1)\n  lt2 <- length(trt2)\n\n  fact <-c( lt1, lt2)\n\n  table <- agricolae::design.ab(\n    trt = fact,\n    r = rep,\n    design = dsg,\n    serie = 2\n  )\n\n  book <- table$book\n\n  lv1 <- factor(1:lt1)\n  lv2 <- factor(1:lt2)\n\n  book[,\"A\"] <- factor(book[,\"A\"], levels = lv1, labels = trt1)\n  book[,\"B\"] <- factor(book[,\"B\"], levels = lv2, labels = trt2)\n\n\n  fb <- data.table::setnames(x = book, old = c(\"plots\", \"A\", \"B\"), new = c(\"ID\", lbt1, lbt2))\n\n  if( tr2 == \"1\"){\n\n    fb[, lbt2] <- NULL\n    fb\n\n\n  } else {\n\n    fb\n\n  }\n\n\n  if (design == \"crd\"){\n\n    fb[,\"r\"] <- paste(\"r\", fb[,\"r\"], sep = \"\")\n    fb <- data.table::setnames(x = fb, \"r\", \"rep\")\n    fb[,\"rep\"] <- as.factor(fb[,\"rep\"])\n    fb\n\n  } else if ( design == \"rcbd\" ){\n\n    fb[,\"block\"] <- paste(\"b\", fb[,\"block\"], sep = \"\")\n    fb[,\"block\"] <- as.factor(fb[,\"block\"])\n    fb\n\n  } else if ( design == \"lsd\" ){\n\n    fb[,\"row\"] <- paste(\"r\", fb[,\"row\"], sep = \"\")\n    fb[,\"row\"] <- as.factor(fb[,\"row\"])\n    fb[,\"col\"] <- paste(\"c\", fb[,\"col\"], sep = \"\")\n    fb[,\"col\"] <- as.factor(fb[,\"col\"])\n    fb\n\n  }\n\n  if(intime == 1){\n\n    fb[,\"ID\"] <- paste(\"U\", fb[,\"ID\"], sep = \"\")\n    fb\n\n  } else {\n\n\n    fk <- fb[rep(seq_len(nrow(fb)), intime),] # if add each = intime!! you can  use for sub sample\n    tm <- as.factor(1:intime)\n    fk[,\"intime\"] <- rep(tm, each = nrow(fb))\n    fk[,\"intime\"] <- paste(\"E\", fk[,\"intime\"], sep = \"\")\n    fk[,\"ID\"] <- paste(\"U\", fb[,\"ID\"], sep = \"\")\n    fb <- fk\n\n  }\n\n\n  if ( !is.null(variables) ){\n\n    fb[, varfb ] <- \"\"\n    fb\n\n  } else { fb }\n\n\n\n}\n\n\n\n#' Mean Comparison Table Summary\n#'\n#' @description Function using resulting output from mean comparison test from agricolae package optimized for graphs.\n#' @param meanComp Object list with the result from mean comparison test\n#' @return Table with complete data for graphics\n#' @importFrom dplyr mutate funs select rename group_by_ summarise full_join\n#' @importFrom tidyr separate\n#' @export\n\ndata_summary <- function(meanComp){\n\n  #to avoid no bisible global variable function\n  std <- r <- trt <- means <- Min <- Max <- ste <- M <- NULL\n\n  fct <- as.character(meanComp$parameters$name.t)\n  fcts <- as.expression(strsplit(fct, split = \":\"))\n\n  dtmn <- meanComp$means\n  dtgr <- meanComp$groups\n\n  dtgr$trt <- gsub(\"\\\\s\", \"\", as.character(dtgr$trt))\n\n  dta <- dtmn %>%\n    dplyr::mutate(ste = std/sqrt(r), trt = as.character(row.names(dtmn)))\n\n  sm <- dplyr::full_join(dta[2:7], dtgr, by = \"trt\") %>%\n    dplyr::select(trt, means, Min, Max, r, std, ste, M) %>%\n    tidyr::separate(\"trt\", sep = \":\", into = eval(fcts)) %>%\n    dplyr::rename(mean = means, min = Min, max = Max, sg = M) %>%\n    dplyr::mutate_each_(funs(factor(.)), fct) %>% as.data.frame()\n\n}\n\n\n#' Regresion line equation\n#'\n#' @description Construc the regression line equation\n#' @param data dataframe with the information\n#' @param y variable in the y axis\n#' @param x variable in the x axis\n#' @return regression equation\n#' @export\n\nlm_eqn <- function(x, y, data){\n\n  fml <- as.formula(paste( x , y, sep = \" ~ \"))\n  mdl <- lm(fml, data)\n\n  eq <- as.character(as.expression(\n    substitute(italic(y) == a + (b) * italic(x) * \",\" ~~ italic(R)^2 ~ \"=\" ~ r2,\n               list(a = format(coef(mdl)[1], digits=2), b = format(coef(mdl)[2], digits=2),\n                    r2 = format(summary(mdl)$r.squared, digits=3) ))))\n\n  eq\n\n  # eq <- substitute(italic(y) == a + b %.% italic(x)*\",\"~~italic(R)^2~\"=\"~r2,\n  #                  list(a = format(coef(mdl)[1], digits = 2),\n  #                       b = format(coef(mdl)[2], digits = 2),\n  #                       r2 = format(summary(mdl)$r.squared, digits = 3)))\n  # as.character(as.expression(eq))\n\n\n}\n\n\n\n\n\n\n\n\n\n",
    "created" : 1487437442096.000,
    "dirty" : false,
    "encoding" : "UTF-8",
    "folds" : "",
    "hash" : "2292598986",
    "id" : "DD7B58AF",
    "lastKnownWriteTime" : 1487468817,
    "last_content_update" : 1487468817491,
    "path" : "~/GitHub/fieldbook/R/utils.R",
    "project_path" : "R/utils.R",
    "properties" : {
    },
    "relative_order" : 1,
    "source_on_save" : false,
    "source_window" : "",
    "type" : "r_source"
}